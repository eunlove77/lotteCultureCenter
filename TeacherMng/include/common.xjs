<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[// 년도 콤보박스 생성
this.com_set_dataset_year = function(ds, startYear){
	var today = new Date();
	
	ds.set_enableevent(false);
	for(var i = today.getYear(); i >= startYear; i--){
		var r = ds.addRow();
		ds.setColumn(r, 'cd', i);
		ds.setColumn(r, 'cdNm', i + '년');
	}
	ds.set_enableevent(true);
}

/************************************************************************
 * ds_codes_list = [{
		ds: this.ds_mdctgry_cdList, cd: "'150'",
	}];
 ************************************************************************/
//데이터셋 코드값 세팅 (1)
this.com_set_code_dataset= function(ds_codes_list){

	for(var i = 0; i < ds_codes_list.length; i++){
		this.com_set_dataset_from_code(ds_codes_list[i]);
	}
}
// (2)
this.com_set_dataset_from_code = function(info){
	var gdsCode = this.application.gdsCode;
	gdsCode.filter('cdId != cd && cdId == ' + info.cd);
	info.ds.copyData(gdsCode, true);
}
 /************************************************************************
 * ds_list = [{
		ds: this.ds_mdctgry_cdList, cdNm: '중분류',
		obj: this.Div02.form.Div00.form.mdclsCtegryCd
	}];
 ************************************************************************/
//콤보박스 기본값 설정 (1)
this.com_set_combobox_default = function(ds_list){	
	for(var i = 0; i < ds_list.length; i++){
		var info = ds_list[i];
		var ds = info.ds;
		
		ds.set_enableevent(false);
		if(info.cdNm){
			ds.insertRow(0);
			ds.setColumn(0, 'cdId', '');
			ds.setColumn(0, 'cd', '');
			ds.setColumn(0, 'cdNm', info.cdNm);
		}
		if(!info.isGrid){
			this.com_set_combobox_default_index(info);
		}
		ds.set_enableevent(true);
	}
}
// 콤보박스 인덱스 초기화 (2)
this.com_set_combobox_default_index = function(info){
	if(info.objs){
		for(var obj of info.objs){
			obj.set_index(0);
			if(info.cdNm)
				obj.set_text(info.cdNm);
		}
	} else {
		info.obj.set_index(0);
		if(info.cdNm)
			info.obj.set_text(info.cdNm);
	}
}
/**************************************************************************
 * 동적 체크박스 추가 param: ds, Div
 **************************************************************************/
this.com_set_dynamic_checkbox_from_dataset = function(ds, p_div){
	
	var content = ["chkAll"];
	for(var i=0; i < ds.rowcount; i++) 
	{
		var id = "chk" + i;
		var obj = new CheckBox();
		obj.init(id, content[i] + ":6", 5, 90, 20);
		p_div.addChild(id, obj);
		obj.set_text(ds.getColumn(i, "cdNm"));		
		obj.set_truevalue(ds.getColumn(i, "cd"));
		obj.set_falsevalue("");
		obj.set_fittocontents("width");
		obj.show();	
		content.push(id);
	}
}
/**************************************************************************
 * 체크박스 클릭이벤트 추가 param: Form
 **************************************************************************/
this.com_fn_click_add = function(pObj)
{
	var arrObj = pObj.components;
	for(var i=0; i<arrObj.length; i++)
	{	
		if(arrObj[i] == "[object Div]"){
			this.com_fn_click_add(arrObj[i].form);
		}
		else 
		{
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") == -1)
			{
				arrObj[i].insertEventHandler("onclick", 0, this.fn_checkbox, this);
			}
		}
	}	
}
this.com_fn_checkboxAll = function(pObj) 
{
	var arrObj = pObj.parent.components;
		
	if(pObj.isChecked())
	{		
		for(var i=0; i<arrObj.length; i++)
		{
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") > -1)
			{				
				arrObj[i].set_value(true);
			}
			else
			{
				if(arrObj[i] == "[object CheckBox]")
				{
					arrObj[i].set_value(arrObj[i].truevalue);
				}
			}
		}
	}
	else 
	{
		for(var i=0; i<arrObj.length; i++)
		{
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") == -1)
			{				
				arrObj[i].set_value(arrObj[i].falsevalue);
			}
			
		}
	}
	
}
this.com_fn_checkbox = function(pObj) 
{
	var arrObj = pObj.parent.components;
		
	if(pObj.isChecked())
	{
		var len = 0;
		var chkLen = 0;
		var chkAll;
		for(var i=0; i<arrObj.length; i++)
		{
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") > -1)
			{				
				chkAll = arrObj[i];
			}
			
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") == -1)
			{
				len++;
				if(arrObj[i].isChecked())
				{
					chkLen++;
				}
			}
		}
		
		if(len == chkLen) 
		{
			chkAll.set_value(true);
		}
	}
	else 
	{
		for(var i=0; i<arrObj.length; i++)
		{
			if(arrObj[i] == "[object CheckBox]" && arrObj[i].name.indexOf("All") > -1)
			{				
				arrObj[i].set_value(false);	
				return;
			}			
		}
	}
}
/**************************************************************************
 * 검색조건 초기화
 **************************************************************************/
this.com_reset_search_form = function(pObj){
	var arrObj = pObj.components;
	for(var i=0; i<arrObj.length; i++)
	{	
		if(arrObj[i] == "[object Div]"){
			this.com_reset_search_form(arrObj[i].form);
		}
		else if(arrObj[i] == "[object Edit]"){
			arrObj[i].set_value("");
		}
		else if(arrObj[i] == "[object Combo]"){
			arrObj[i].set_index(0);
		}
		else if(arrObj[i] == "[object CheckBox]"){
			var fv = arrObj[i].falsevalue;
			arrObj[i].set_value(fv ? fv : false);
		}
		else if(arrObj[i] == "[object Calendar]"){
			arrObj[i].set_value("");
			arrObj[i].calendaredit.set_readonly(true); 
		}
	}
}
/**************************************************************************
 * 카테고리
 **************************************************************************/
this.ctgryObj = null;
this.com_set_category = function(lgObj, mdObj, smObj){
	this.ctgryObj = [lgObj, mdObj, smObj];
	
	var outData = "ds_classCtgyLarge_list=classCategoryLargeList "
	outData += "ds_classCtgyMiddle_list=classCategoryMiddleList "
	outData += "ds_classCtgySmall_list=classCategorySmallList";
	
	var tranObj = {
		strSvcId : "codeList",
		strSvcUrl : this.application.Admin_svc + "::class/getCodeList.do",
		inData : "",
		outData : outData,
		strArg : "cdId=ctgy brchCd=" + this.brchCd,
		callBackFnc : "com_set_category_callback",
		isAsync : false,
		menuSeq : this.menuSeq
	}

	if(this.gfn_btn_auth(this.menuSeq, "accSrchYn")) return;
	this.gfn_transaction(tranObj);
}
//강좌 카테고리 세팅
this.com_set_category_callback = function(svcId, errorCode, errorMsg)
{
	this.ds_classCtgyMiddle_list.filter("cdId == ''");
	this.ds_classCtgySmall_list.filter("cdId == ''");

	var ds_list = [{
		ds: this.ds_classCtgyLarge_list, cdNm: '대분류', obj: this.ctgryObj[0]
	}, {
		ds: this.ds_classCtgyMiddle_list, cdNm: '중분류', obj: this.ctgryObj[1]
	}, {
		ds: this.ds_classCtgySmall_list, cdNm: '소분류', obj: this.ctgryObj[2]
	}];
	this.com_set_combobox_default(ds_list);
}
//카테고리 대분류 영역 변경
this.com_fn_classCtgyLarge_chg = function(obj, middleObj, smallObj)
{
	this.ds_classCtgyMiddle_list.set_enableevent(false);
	this.ds_classCtgyMiddle_list.deleteRow(0);
	this.ds_classCtgyMiddle_list.filter("cdId == '" + obj.value + "'");

	this.ds_classCtgyMiddle_list.insertRow(0);
	this.ds_classCtgyMiddle_list.setColumn(0, "cdId", "");
	this.ds_classCtgyMiddle_list.setColumn(0, "cd", "");
	this.ds_classCtgyMiddle_list.setColumn(0, "cdNm", "중분류");
	
	this.ds_classCtgyMiddle_list.set_enableevent(true);
	
	middleObj.set_index(0);
	smallObj.set_index(0);
	
	this.ds_classCtgySmall_list.filter("cdId == ''");
	
	this.ds_search.setColumn('mdclsCtegryCd', '');
	this.ds_search.setColumn('smclsCtegryCd', '');
}
//카테고리 중분류 영역 변경
this.com_fn_classCtgyMiddle_chg = function(obj, smallObj)
{
	this.ds_classCtgySmall_list.set_enableevent(false);
	this.ds_classCtgySmall_list.deleteRow(0);
	this.ds_classCtgySmall_list.filter("cdId == '" + obj.value + "'");
	
	this.ds_classCtgySmall_list.insertRow(0);
	this.ds_classCtgySmall_list.setColumn(0, "cdId", "");
	this.ds_classCtgySmall_list.setColumn(0, "cd", "");
	this.ds_classCtgySmall_list.setColumn(0, "cdNm", "소분류");

	smallObj.set_index(0);
	this.ds_classCtgySmall_list.set_enableevent(true);
	
	this.ds_search.setColumn('smclsCtegryCd', '');
}
//카테고리 초기화
this.com_reset_category = function(lgObj, mdObj, smObj){
	this.ds_classCtgyMiddle_list.filter("cdId == ''");
	this.ds_classCtgySmall_list.filter("cdId == ''");
}
/**************************************************************************
 * 학기 설정
 * this.smsterComboObj
 **************************************************************************/
this.smsterComboObj = "";
this.com_reset_search_semester = function(obj){
	if(obj){
		this.smsterComboObj = obj;
	}

	this.fn_sesterInfo();
	this.fn_year_add();

}
//학기 조회
this.fn_sesterInfo = function()
{	
	var tranObj = {
		strSvcId : "sesterInfo",
		strSvcUrl : this.application.Admin_svc + "::class/getSesterInfo.do",
		inData : "search=ds_search",
		outData : "",
		strArg : "",
		callBackFnc : "fnCallback_smster",
		isAsync : false,
		menuSeq : this.getOwnerFrame().param.MENU_ID
	}

	this.gfn_transaction(tranObj);
};
//학기 연도 추가
this.fn_year_add = function() 
{
	this.ds_year_list.deleteAll();

	var tranObj = {
		strSvcId : "getSesterYearList",
		strSvcUrl : this.application.Admin_svc + "::class/getSesterYearList.do",
		inData : "",
		outData : "ds_year_list=yearList",
		strArg : "brchCd="+this.ds_search.getColumn(0, 'brchCd'),
		callBackFnc : "fnCallback",
		isAsync : false,
		menuSeq : this.getOwnerFrame().param.MENU_ID
		
	}
	this.gfn_transaction(tranObj);
	
	var year = new nexacro.Date().getFullYear();
	this.initYy = year;
	if(this.yy != "")
	{
		year = nexacro.toNumber(this.yy);
	}
	
	if(this.ds_year_list.getRowCount() == 0) {
		this.ds_year_list.addRow();
		this.ds_year_list.setColumn(0, "cd", year);
		this.ds_year_list.setColumn(0, "cdNm", year + "년");
	}

	this.ds_search.setColumn(0, "yy", year);
}
this.fnCallback_smster =  function(svcID, errorCode, errorMsg)
{
	//학기 설정
	if(this.lectSmsterCd){
		var lectSmsterCd = nexacro.toNumber(this.lectSmsterCd);
		this.smsterComboObj.set_index(lectSmsterCd-1);
	}
	else{
		this.smsterComboObj.set_index(0);
	}
}

/**************************************************************************
 * 지점명 콤보박스 세팅
 **************************************************************************/
this.com_set_branch_list = function(){
	//지점초기화
	this.brchCd = nexacro.getPrivateProfile("brchCd") == "0000" ? "0001" : nexacro.getPrivateProfile("brchCd");
	this.ds_spot_list.copyData(this.application.gdsSpotCdList);
	this.ds_spot_list.deleteRow(0);

	if(nexacro.getPrivateProfile("brchCd") == "0000")
	{
		this.ds_spot_list.insertRow(0);
		this.ds_spot_list.setColumn(0, "cd", "");
		this.ds_spot_list.setColumn(0, "cdNm", "전체");
	}
	else
	{
		this.ds_spot_list.filter("cd=='" + nexacro.getPrivateProfile("brchCd") + "'");
	}
}

/**************************************************************************
 * 핸드폰 번호 세팅
 **************************************************************************/
this.com_set_hpNo_to_stmidlastNo = function(str){
	if(!str) return ;
	
	str = str.replaceAll("-", "");
	var hpStNo, hpMidNo, hpLastNo;

	if(str.length == 10){
		//10자리 전화번호는 전부 입력해야한다. 가운데 번호를 3자리로 처리
		hpStNo = str.slice(0, 3);
		hpMidNo = str.slice(3, 6);
		hpLastNo = str.slice(6, 10);
	}
	else{
		//앞자리부터 채워서 검색
		hpStNo = str.slice(0, 3);
		hpMidNo = str.slice(3, 7);
		hpLastNo = str.slice(7, 11);
	}
	
	this.ds_search.setColumn(0, 'hpStNo', hpStNo);
	this.ds_search.setColumn(0, 'hpMidNo', hpMidNo);
	this.ds_search.setColumn(0, 'hpLastNo', hpLastNo);

}

/**************************************************************************
 * 그리드 체크 
 **************************************************************************/
this.com_get_checkedArr_in_grid = function(ds){
	var check_array = ds.checkarray;
	var checked_array = new Array();
	for(var i = 0; i < check_array.length; i++){
		if(check_array[i] > 0) checked_array.push(i);
	}
	
	return checked_array;
}
/**************************************************************************
 * 검색조건의 체크박스 문자열로 조합
 **************************************************************************/
this.com_set_checkbox_to_string = function(pObj){
	var rtnStr = "";
	var comma = "";
	
	var arrObj = pObj.form.components;
	for(var i=0; i<arrObj.length; i++)
	{	
		var obj = arrObj[i];
		if(obj == "[object CheckBox]"){
			if(obj.id.indexOf('All') > -1 && obj.isChecked()){
				return "";
			}
			else if(obj.isChecked()){
				rtnStr += comma + obj.truevalue;
				comma = ",";
			}
		}
	}
	
	return rtnStr;
}
/*===========================================================================*/
// 주민등록번호를 체크한다.
/*===========================================================================*/
this.checkRegNo = function(pRegNo, pConfirmMode, pObjFocus)    {
    var tArrMultiply  = new Array(2,3,4,5,6,7,8,9,2,3,4,5);
    var sum   = 0;
    var magic = 11;

    if (pConfirmMode != true ) pConfirmMode = false;

    if (pRegNo.length != 13)    {
        alert("주민등록번호는 13자리 형식입니다.");
        if (pObjFocus)  pObjFocus.setFocus();  // 만약 포커스를 넘길 객체가 있으면 포커스 이동.

        return false;
    }

    for(var i = 0;i < pRegNo.length - 1;i++)    {
        sum += Number(pRegNo.charAt(i)) * tArrMultiply[i];
    }

    var tConfirmMode = true;

    // (magic - sum % magic)가 10보다 크거나 같은 경우가 있으므로 10으로 나누어줌.
    var tCheckSum = ((magic - sum % magic) % 10).toString();
    if (pRegNo.charAt(12) !=  tCheckSum)    {
        // 20050324. kkr. 잘못된 주민번호인 경우 무조건 저장 안되게 함.
        /*
        if (pConfirmMode == true)   {
            if (! confirm("잘못된 주민번호입니다.\n\n계속하시겠습니까 ?"))    {
                if (pObjFocus)  pObjFocus.focus();  // 만약 포커스를 넘길 객체가 있으면 포커스 이동.
                return false;
            }

        }
        else    {
        */
              //2005.05.09 우리나라사람이 아닌 외국인 등록번호로 재 Check
              if (! this.fgn_no_chksum(pRegNo) ) {
                alert("잘못된 주민번호입니다.");
      
                if (pObjFocus)  pObjFocus.setFocus();  // 만약 포커스를 넘길 객체가 있으면 포커스 이동.
                return false;
            }
        /*
        }
        */
    }

    return true;
}

/*===========================================================================*/
// 외국인 등록번호를 체크한다.
/*===========================================================================*/
this.fgn_no_chksum = function(reg_no)  {
    var sum = 0;
    var odd = 0;
    
    buf = new Array(13);
    for (i = 0; i < 13; i++) buf[i] = parseInt(reg_no.charAt(i));

    odd = buf[7]*10 + buf[8];
    
    if (odd%2 != 0) {
      return false;
    }

    if ((buf[11] != 6)&&(buf[11] != 7)&&(buf[11] != 8)&&(buf[11] != 9)) {
      return false;
    }
        
    multipliers = [2,3,4,5,6,7,8,9,2,3,4,5];
    for (i = 0, sum = 0; i < 12; i++) sum += (buf[i] *= multipliers[i]);


    sum=11-(sum%11);
    
    if (sum>=10) sum-=10;

    sum += 2;

    if (sum>=10) sum-=10;

    if ( sum != buf[12]) {
        return false;
    }
    else {
        return true;
    }
}
/**************************************************************************
* parameter : saupno => 사업자등록번호 (앞의 3자리,중간2자리,뒤의 5자리 총10자리)
* return	: true/false
* 설명		: 사업자번호가 유효 한지 검사
**************************************************************************/
this.chk_Saup_No = function(saupno)
{
	//alert("saupno = " + saupno);

	if (saupno.length != 10 )
	{
		alert("사용 불가한 사업자번호입니다.");
		return false;
	}
	var sum = 0;
	var getlist = new Array(10);
	var chkvalue = new Array("1","3","7","1","3","7","1","3","5");
	var i = 0;
	for (i=0;i<10;i++)
	{
		getlist[i] = saupno.substring(i,i+1);
	}
	for (i=0;i<9;i++)
	{
		sum += getlist[i]*chkvalue[i];
	}
	//alert('첫번째 sum   ==>    ['+sum+']    ');
	sum = sum +parseInt((getlist[8]*5)/10,10) ;
	//alert('두번째 sum   ==>    ['+sum+']   getlist[8] ==>   ['+getlist[8]+']');
	sidliy = sum%10;
	sidchk = 0;
	//alert('sidliy = sum%10; 에서 sidliy ==>   ['+sidliy+']');
	if (sidliy != 0)
	{
		sidchk = 10 - sidliy;
	}
	else
	{
		sidchk = 0;
	}
	//alert('마지막에  sidchk != getlist[9] sidchk ==>  ['+sidchk+']  getlist[9]  ==> ['+getlist[9]+']    sidchk ==>['+sidchk+']');  
	if (sidchk != getlist[9])
	{
		alert("사용 불가한 사업자번호입니다.");
		return false;
	}
	return true;
}
/**************************************************************************
 * 입력폼 readonly
 **************************************************************************/
this.com_set_form_readonly = function(pObj){
	var readonlyComps = "";
	
	readonlyComps += "[object Edit]";
	readonlyComps += "[object Combo]";
	readonlyComps += "[object CheckBox]";
	readonlyComps += "[object Calendar]";
	readonlyComps += "[object TextArea]";
	
	var arrObj = pObj.components;
	for(var i=0; i<arrObj.length; i++)
	{	
		if(arrObj[i] == "[object Div]"){
			this.com_set_form_readonly(arrObj[i].form);
		}
		else if(arrObj[i] == "[object Grid]"){
			arrObj[i].clearEventHandler("oncellclick");
			arrObj[i].set_readonly(true);
		}
		else if(readonlyComps.indexOf(arrObj[i]) > -1){
			arrObj[i].set_readonly(true);
		}
	}
}
/**************************************************************************
 * dataset 내부 데이터 존재 여부
 **************************************************************************/
this.com_have_value_in_ds = function(ds){
	for(var i = 0; i < ds.rowcount; i++){
		for(var j = 0; j < ds.colcount; j++){
			if(!ds.getColumn(i, j)){
				return false;
			}
		}
	}
	return true;
}
/**************************************************************************
 * 문자열 마스킹 처리
 **************************************************************************/
this.com_setMasking = function(str, type){
	if(!str) return "";

	switch(type){
		case "name":
			return this.masking_name(str);
		case "tel": 
			return this.gfn_setMaskingTel(str);
		case "email":
			return this.masking_email(str);
		case "id":
			return this.gfn_setMasking(str, 3);
	}
	
}
this.masking_name = function(str){
	//국문 이름
	const regExp = /[ㄱ-ㅎㅏ-ㅣ가-힣]/g;
	if(regExp.test(str)){
		return this.gfn_setMasking(str, 1, 1);
	}

	//영문 이름
	const strArr = str.split(' ');
	let firstName = strArr[0];
	let makingLength = firstName.length - 2;
	if(makingLength === 0){
		strArr[0] = strArr[0].replace(/.$/, '*');
	}
	else if(makingLength > 0){
		strArr[0] = this.gfn_setMasking(firstName, 1, makingLength);
	}
	return strArr.join(' ');
}
this.masking_email = function(str){
	const strArr = str.split('@');

	const id = this.gfn_setMasking(strArr[0], 3);

	return id + (strArr[1] ? ('@' + strArr[1]) : '');
}
]]></Script>
