<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[
/**
* Function Name : gfn_sessionCheck
* Description   : 서버 세션 검사
* Arguments     : 
* Return        : 
*/
this.gfn_sessionCheck = function(strSvc, callBackFnc){
	var strSvcId    = "session_check";
	var strSvcUrl   = strSvc + "::check.do";
	var inData      = "";
	var outData     = "";
	var strArg      = "";
	//var callBackFnc = "fn_sessionCallback";
	var isAsync     = false;

	this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            callBackFnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]			
}


//처리콜백 함수
this.fn_sessionCallback = function(svcID,errorCode,errorMsg)
{

	// 에러 시 화면 처리 내역
	if(errorCode != 0)
	{
    
		this.alert(errorCode+"\n"+errorMsg);
	
		switch(svcID)
		{
			case "session_check":			
				//console.log(this);
				//console.log(this.getOwnerFrame().form);
				//this.getOwnerFrame().form.go("Sample::Login_Test.xfdl");
			break;
		}
	
		return;
	}

	switch(svcID)
	{    
		case "session_check":
			console.log("로그인 성공");
			//this.getOwnerFrame().form.go("FrameBase::Form_Main.xfdl");
		break; 
	}
};

/**
* Function Name : gfn_codeList
* Description   : 공통 코드 목록 조회
* Arguments     : 
* Return        : 
*/
this.gfn_codeList = function(strSvc){
	var strSvcId    = "code_list";
	var strSvcUrl   = strSvc + "::code/getCodeList.do";
	var inData      = "";
	var outData     = "gdsCode=output1";
	var strArg      = "";
	var callBackFnc = "fn_codeListCallback";
	var isAsync     = false;

	this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            callBackFnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]			
}

this.fn_codeListCallback = function(svcID,errorCode,errorMsg){
	// 에러 시 화면 처리 내역
	if(errorCode != 0)
	{
    
		this.alert(errorCode+"\n"+errorMsg);
	
		switch(svcID)
		{
			case "code_list":			

			break;
		}
	
		return;
	}

	switch(svcID)
	{    
		case "code_list":
			console.log("코드 조회 성공");
		break; 
	}
}



/**
* Function Name : gfn_isNull
* Description   : 입력값 Null 체크 함수
* Arguments     : pvVal – 입력값
* Return        : true/false 값이 Null일 경우 true
*/
this.gfn_isNull = function (pvVal)
{
	if (new String(pvVal).valueOf() == "undefined") 
	{
		return true;
	}
	if (pvVal == null) 
	{
		return true;
	}
	if (("x" + pvVal == "xNaN") && (new String(pvVal.length).valueOf() == "undefined")) 
	{
		return true;
	}
	if (pvVal.length == 0) 
	{
		return true;
	}

	return false;
}

/**
* Function Name : gfn_showModal
* Description   : popup open (show modal)
* Arguments     : sPopupId – 팝업명, arrArguments - 전달값, sPopupUrl - 팝업 화면 주소, popupCallback - 팝업 콜백, obj - this,
*				  nPopupWidth - 팝업 넓이, nPopupHeight - 팝업 높이, bShowFrameTitle - frametitle 사용유무, bShowFrameStatus - frame status 값 사용 유무, sAlignType - 팝업 align
* Return        : callback function
*/
this.gfn_showModal = function (sPopupId, arrArguments, sPopupUrl, popupCallback, obj, nPopupWidth, nPopupHeight, bShowFrameTitle, bShowFrameStatus, sAlignType)
{
	// 현재 구동되는 정보를 업데이트 한다.
	var childFrame = new ChildFrame();
	var parentFrame = obj.getOwnerFrame();
	
	var sOpenAlignType = "center middle";

	// TO-DO 팝업사이즈 미지정 시 디폴트 값 적용
	if (this.gfn_isNull(nPopupWidth)) 
	{
		nPopupWidth = obj.confing.popupWidth;
	}

	if (this.gfn_isNull(nPopupHeight)) 
	{
		nPopupHeight = obj.confing.popupHeight;
	}

	var sShowStatus;
	if (this.gfn_isNull(bShowFrameStatus) || bShowFrameStatus == false) 
	{
		sShowStatus = false;
	}
	else if (bShowFrameStatus == true) 
	{
		sShowStatus = true;
	}
	
	if (!this.gfn_isNull(sAlignType)) 
	{
		sOpenAlignType = sAlignType;
	}

	var nPopupLeft = "";
	var nPopupTop = "";

	// 팝업 포지션 값 위치 설정
	nPopupLeft = 0;
	nPopupTop = 0;
	
	/* ===== Statusbar 옵션 추가 - Start ===== */
	if (sShowStatus == true) 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4 + 25, null, null, sPopupUrl);
		childFrame.set_statusbarheight(25);
		childFrame.set_showstatusbar(true);
	}
	else 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4, null, null, sPopupUrl);
	}
	
	/* ===== Statusbar 옵션 추가 - End   ===== */
	childFrame.set_openalign(sOpenAlignType);
	childFrame.set_autosize(false);	
	childFrame.set_dragmovetype("normal");

	if (this.gfn_isNull(bShowFrameTitle) || bShowFrameTitle == true) 
	{
		childFrame.set_showtitlebar(true);
		childFrame.set_border("3 solid #351b6f");
		childFrame.set_border("normal");
	}else{
		childFrame.set_showtitlebar(false);
	}
	
	// 동적으로 생성한 ChildFrame을 Modal Dialog로 보여줌.
	childFrame.showModal(parentFrame, arrArguments, obj, popupCallback, true);
};

/**
* Function Name : gfn_setGridSize
* Description   : grid resize (폼 리사이즈 시 그리드 포맷 변경)
* Arguments     : objGrid - grid
* Return        : none
*/
this.gfn_setGridSize = function(objGrid)
{
	if(this.width < 1400)
	{
		objGrid.set_formatid("default");
	}
	else
	{
		objGrid.set_formatid("middle");
	}
}

/**
* Function Name : gfn_validCheck
* Description	: validation check (필수 입력 값 확인)
* Arguments		: arrList - component list
*         		  objDs   - Dataset
* Return 		: true/false (null is false)
*/
this.gfn_validCheck = function(arrList,objDs)
{
	var nRow = 0;
	var sBindId = "";
	var svalues;
	
	for(var i=0; i<arrList.length; i++)
	{
		obj = arrList[i];
		sBindId = this.gfn_findBindColumnId(obj.name);
		
		for(var k=0; k<objDs.getRowCount(); k++)
		{
			svalues = objDs.getColumn(k,sBindId);
			
			if(this.gfn_isNull(svalues))
			{
				var objStatic = this.components["sta" + obj.name];
				var sNamed = objStatic.text;
				
				var strReturn = "";
				if(!this.gfn_isNull(sNamed))
				{
					strReturn = "'"+sNamed+"' ";
				}
				
				alert(strReturn+"필수 입력값을 확인하세요");
				obj.setFocus();
				
				objDs.set_rowposition(k);
				return false;
			}
		}
	}
	
	return true;
}

/**
* Function Name : gfn_findBindColumnId
* Description	: find bind dataset column id (컴포넌트에 연결 된 바인드 컬럼 아이디 찾기)
* Arguments		: id - component name
* Return 		: rtn - column id
*/
this.gfn_findBindColumnId = function(id)
{
	var rtn;
	for(var i=0; i < this.binds.length; i++ )
	{
		if( this.binds[i].compid == id )
		{
			rtn = this.binds[i].columnid;
			return rtn;
		}
	}
}

/**
* Function Name : gfn_makePhoneNumMask
* Description	: tel number set maskformat (전화번호 값 마스크 포맷 적용)
* Arguments		: objMsk - maskedit component
*         		  sValue - post edit value
* Return 		: none
*/
this.gfn_makePhoneNumMask = function(objMsk, sValue)
{
	var sReplaceValue;
	
	var sMask = "@@@-@@@@-@@@@";
	
	if(sValue.substr(0, 2)=="02")
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		
		if(sReplaceValue.length==9)
		{
			sMask = "@@-@@@-@@@@";
		}else
		{
			sMask = "@@-@@@@-@@@@";
		}
	}
	else
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		if(sReplaceValue.length==10)
		{
			sMask = "@@@-@@@-@@@@";
		}else
		{
			sMask = "@@@-@@@@-@@@@";
		}
	}
	
	objMsk.set_format(sMask);
}

/**
* Function Name : gfn_setCellTelMaskFormat
* Description	: tel number return maskformat (전화번호 값 마스크 포맷 리턴 : 그리드 expr용)
* Arguments		: sValue - post edit value
* Return 		: sMask - mask format
*/
this.gfn_setCellTelMaskFormat = function(sValue)
{
	if(this.gfn_isNull(sValue))
	{
		return "@@@-@@@@-@@@@";
	}	
	
	var sReplaceValue;
	
	var sMask = "";
	
	if(sValue.substr(0, 2)=="02")
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		
		if(sReplaceValue.length==9)
		{
			sMask = "@@-@@@-@@@@";
		}else
		{
			sMask = "@@-@@@@-@@@@";
		}
	}
	else
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		if(sReplaceValue.length==10)
		{
			sMask = "@@@-@@@-@@@@";
		}else
		{
			sMask = "@@@-@@@@-@@@@";
		}
	}
	
	return sMask;
};



this.gfn_headCheckBox = function(obj, curCellIndex, strColName){
	var headerCell = obj.getBindCellIndex("body", strColName);
	var checkValue = "Y";
	
	if(obj.getCellProperty("Head", curCellIndex, "displaytype") == "checkboxcontrol"){
	
		if(obj.getCellProperty("Head", headerCell, "displaytype") == "checkboxcontrol") {
			if (obj.getCellProperty("Head", headerCell, "text") == "Y") { //현재 체크박스 값과 반대되게
				checkValue = "N";
			} else {
				checkValue = "Y";
			}
			
			obj.setCellProperty("Head", headerCell, "text", checkValue); //헤더 체크박스 값 변경
			
			var objDataset = obj.getBindDataset(); //그리드에 바인드되어있는 dataset 가져옴
			if(objDataset.getRowCount() > 0) {
				objDataset.set_enableevent(false); //이벤트 비활성화
				for (var i=0; i < objDataset.getRowCount(); i++) {			
					
					if(objDataset.getRowType(i) != 2){
						objDataset.setColumn(i, strColName, checkValue); //체크박스를 checkValue로 설정
					}
					
				}
				objDataset.set_enableevent(true); //이벤트 활성화
			}
		}
	}
}

this.gfn_enable_check = function(objDs, strColName){		
	objDs.set_enableevent(false);	
	for(var i = 0 ; i < objDs.getRowCount() ; i++){			
		objDs.setColumn(i, strColName,"N");
	}
	objDs.set_enableevent(true);
}

this.gfn_check_length = function(objDs, strColName){				
	var chkVal = "N";
	var cnt = 0;
	for(var i = 0 ; i < objDs.getRowCount() ; i++){			
		chkVal = objDs.getColumn(i, "chk");
		if(chkVal == "Y"){
			cnt++ ;
		}
	}	
	
	return cnt;
}


/**
* Function Name : gfn_component_repostion
* Description	: 히튼 컴포넌트를 숨기처리후 포지션 변경이 필요한 컴포넌트 포지션 변경
* Arguments		: hideCompName - hidden component, arrRepositionCompName - reposition components, isVisible - visible state
* Return 		: 
*/
this.gfn_component_repostion = function(arrHideCompName, arrRepositionCompName, isVisible, interval){

	var components = this.components;
	var top_val = 0;
	var tmpIndex = 0;
	
	for(var i = 0 ; i < arrRepositionCompName.length ; i++){
		if(!isVisible){			
			components[arrRepositionCompName[i]].ori_top = components[arrRepositionCompName[i]].top;
		}
	}

	for(var i = 0 ; i < arrHideCompName.length ; i++){
		components[arrHideCompName[i]].set_visible(isVisible);
	}
	
	for(var i = 0 ; i < arrRepositionCompName.length ; i++){
		if(!isVisible){			
			if(i == 0){
				components[arrRepositionCompName[i]].set_top( components[arrHideCompName[i]].top );
			}else{				
				top_val = parseInt(components[arrRepositionCompName[0 + tmpIndex]].top) + parseInt(components[arrRepositionCompName[0 + tmpIndex]].height) + interval;				
				components[arrRepositionCompName[i]].set_top( top_val );				
				tmpIndex += 1;
			}
		}else{
			components[arrRepositionCompName[i]].set_top( components[arrRepositionCompName[i]].ori_top );
			tmpIndex = 0;
		}
	}	
}



/**
* Function Name : gfn_cutFileSize
* Description	: 파일 사이즈 표시
* Arguments		: filesize bytes
* Return 		: 
*/
this.gfn_cutFileSize = function(filesize)
{
    var sOutput = filesize + " bytes";
    for (var aMultiples = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], nMultiple = 0, nApprox = filesize / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) 
    {
        sOutput = nApprox.toFixed(3) + " " + aMultiples[nMultiple];
    }
    return sOutput;
};


/**
* Function Name : gfn_fileDown
* Description	: 파일 다운로드
* Arguments		: objDs : 첨부파일 dataset, fileDownTransfer : FileDownTransfer Object
* Return 		: 
*/
this.gfn_fileDown = function(objDs, fileDownTransfer){
	
	var application = nexacro.getApplication();
	var objGdsFileDown = application.gdsFileDown;
	
	var saveFileNm = "";
	var realFileNm = "";
	var phyPath = "";
		
	objGdsFileDown.clearData();	

	for(var i = 0 ; i < objDs.getRowCount() ; i++){
		var nChk = objDs.getColumn(i, "chk");
		
		if(nChk == "Y"){
			var nRow = objGdsFileDown.addRow();		
			
			saveFileNm = objDs.getColumn(i, "saveFileNm");
			realFileNm = objDs.getColumn(i, "realFileNm");
			phyPath = objDs.getColumn(i, "phyPath");
			
			objGdsFileDown.setColumn(nRow, "saveFileNm", saveFileNm);
			objGdsFileDown.setColumn(nRow, "realFileNm", realFileNm);
			objGdsFileDown.setColumn(nRow, "phyPath", phyPath);
			
			objDs.setColumn(i, "chk", "N");
		}
	}
	
	if(objGdsFileDown.getRowCount() > 0){
		fileDownTransfer.setPostData("fileInfo", objGdsFileDown.saveXML());		
		
		if(objGdsFileDown.getRowCount() > 1){
			fileDownTransfer.set_downloadfilename("첨부파일.zip");
		}else{
			fileDownTransfer.set_downloadfilename(realFileNm);
		}
		
		fileDownTransfer.download();
				
	}else{
		this.alert("다운로드 할 파일을 선택하세요.");
	}
}

this.gfn_btn_auth = function(objDs, authType){
	
	var authYn = objDs.getColumn(0, authType);
	
	if(authYn == "N") { 
		this.alert("권한이 부족합니다.");
		return true;
	}else{
		return false;
	}
}]]></Script>
