<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[


/**
* Function Name : gfn_transaction
* Description   : 공통 트랜잭션
* Arguments     : 
* Return        : 
*/
this.gfn_transaction = function(tranObj)
{
	//세션 체크
	this.gfn_sessionCheck();
	
	if(nexacro.getApplication().isAuth)
	{
		this.transaction(
			tranObj.strSvcId ,   					 // transaction을 구분하기 위한 svc id값
            tranObj.strSvcUrl ,       				 // trabsaction을 요청할 주소
            this.gfn_nvl(tranObj.inData) ,           // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            this.gfn_nvl(tranObj.outData) ,          // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            this.gfn_nvl(tranObj.strArg),            // 입력값으로 보낼 arguments, a=b
            this.gfn_nvl(tranObj.callBackFnc),       // transaction의 결과를 받을 Function 이름
            this.gfn_nvl(tranObj.isAsync) 			 // 비동기통신 여부 [생략가능]
		);   
	}
	      		
}




/**
* Function Name : gfn_sessionCheck
* Description   : 서버 세션 검사
* Arguments     : 
* Return        : 
*/
this.gfn_sessionCheck = function(){
	var sessionSvc = nexacro.getApplication().Session_svc;
	var fnc = "gfn_sessionCallback";
	
	var strSvcId    = "session_check";
	var strSvcUrl   = sessionSvc + "::check.do";
	var inData      = "";
	var outData     = "";
	var strArg      = "";
	var isAsync     = false;

	this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            fnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]				
			
}


// 세션 확인 후 처리콜백 함수
this.gfn_sessionCallback = function(svcID,errorCode,errorMsg)
{	
	// 에러 시 화면 처리 내역
	if(errorCode != 0)
	{
    
		this.alert(errorCode+"\n"+errorMsg);
	
		switch(svcID)
		{
			case "session_check":	
				nexacro.getApplication().gfn_initFrame();
			break;
		}
	
		return;
	}

	switch(svcID)
	{    
		case "session_check":
			trace("세션 유지");
			nexacro.getApplication().isAuth = true;
		break; 
	}
};

//로컬스토리지 로그인정보 삭제
this.gfn_removeLgnInfo = function()
{
  nexacro.removePrivateProfile("branch");
  nexacro.removePrivateProfile("name");
  nexacro.removePrivateProfile("id");
};


/**
* Function Name : gfn_codeList
* Description   : 공통 코드 목록 조회
* Arguments     : 
* Return        : 
*/
this.gfn_codeList = function(strSvc){
	var strSvcId    = "code_list";
	var strSvcUrl   = strSvc + "::code/getCodeList.do";
	var inData      = "";
	var outData     = "gdsCode=output1";
	var strArg      = "";
	var callBackFnc = "fn_codeListCallback";
	var isAsync     = false;

	this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            callBackFnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]			
}

this.fn_codeListCallback = function(svcID,errorCode,errorMsg){
	
	var application = nexacro.getApplication();
	//var gdsCodeList = application.gdsCode;
	//var gdsAuthCdList = application.gdsAuthCdList;
	
	// 에러 시 화면 처리 내역
	if(errorCode != 0)
	{
    
		this.alert(errorCode+"\n"+errorMsg);
	
		switch(svcID)
		{
			case "code_list":			

			break;
		}
	
		return;
	}

	switch(svcID)
	{    
		case "code_list":
			console.log("코드 조회 성공");			
			var nRow = "";
			
			for(var i = 0 ; i < application.gdsCode.rowcount ; i++){
				
				if(application.gdsCode.getColumn(i, "cdId") == "018" && application.gdsCode.getColumn(i, "dpth") == "1"){
					nRow = application.gdsAuthCdList.addRow();
					application.gdsAuthCdList.setColumn(nRow, "cd", application.gdsCode.getColumn(i, "cd"));
					application.gdsAuthCdList.setColumn(nRow, "cdNm", application.gdsCode.getColumn(i, "cdNm"));
				}
			}
			
			for(var i = 0 ; i < application.gdsCode.rowcount ; i++){
				
				if(application.gdsCode.getColumn(i, "cdId") == "spotCd" && application.gdsCode.getColumn(i, "dpth") == "1"){
					nRow = application.gdsSpotCdList.addRow();
					application.gdsSpotCdList.setColumn(nRow, "cd", application.gdsCode.getColumn(i, "cd"));
					application.gdsSpotCdList.setColumn(nRow, "cdNm", application.gdsCode.getColumn(i, "cdNm"));
				}
			}
			
			
			
		break; 
	}
}



/**
* Function Name : gfn_isNull
* Description   : 입력값 Null 체크 함수
* Arguments     : pvVal – 입력값
* Return        : true/false 값이 Null일 경우 true
*/
this.gfn_isNull = function (pvVal)
{
	if (new String(pvVal).valueOf() == "undefined") 
	{
		return true;
	}
	if (pvVal == null) 
	{
		return true;
	}
	if (("x" + pvVal == "xNaN") && (new String(pvVal.length).valueOf() == "undefined")) 
	{
		return true;
	}
	if (pvVal.length == 0) 
	{
		return true;
	}

	return false;
}



/**
* Function Name : gfn_nvl
* Description   : 입력값 Null 
* Arguments     : pvVal – 입력값
* Return        : true/false 값이 Null일 경우 ""
*/
this.gfn_nvl = function (pvVal)
{
	if (new String(pvVal).valueOf() == "undefined") 
	{
		return "";
	}
	if (pvVal == null) 
	{
		return "";
	}
	if (("x" + pvVal == "xNaN") && (new String(pvVal.length).valueOf() == "undefined")) 
	{
		return "";
	}
	if (pvVal.length == 0) 
	{
		return "";
	}

	return pvVal;
}

/**
* Function Name : gfn_setGridSize
* Description   : grid resize (폼 리사이즈 시 그리드 포맷 변경)
* Arguments     : objGrid - grid
* Return        : none
*/
this.gfn_setGridSize = function(objGrid)
{
	if(this.width < 1400)
	{
		objGrid.set_formatid("default");
	}
	else
	{
		objGrid.set_formatid("middle");
	}
}

/**
* Function Name : gfn_validCheck
* Description	: validation check (필수 입력 값 확인)
* Arguments		: arrList - component list
*         		  objDs   - Dataset
* Return 		: true/false (null is false)
*/
this.gfn_validCheck = function(arrList,objDs)
{
	var nRow = 0;
	var sBindId = "";
	var svalues;
	
	for(var i=0; i<arrList.length; i++)
	{
		obj = arrList[i];
		sBindId = this.gfn_findBindColumnId(obj.name);
		
		for(var k=0; k<objDs.getRowCount(); k++)
		{
			svalues = objDs.getColumn(k,sBindId);
			
			if(this.gfn_isNull(svalues))
			{
				var objStatic = this.components["sta" + obj.name];
				var sNamed = objStatic.text;
				
				var strReturn = "";
				if(!this.gfn_isNull(sNamed))
				{
					strReturn = "'"+sNamed+"' ";
				}
				
				alert(strReturn+"필수 입력값을 확인하세요");
				obj.setFocus();
				
				objDs.set_rowposition(k);
				return false;
			}
		}
	}
	
	return true;
}

/**
* Function Name : gfn_findBindColumnId
* Description	: find bind dataset column id (컴포넌트에 연결 된 바인드 컬럼 아이디 찾기)
* Arguments		: id - component name
* Return 		: rtn - column id
*/
this.gfn_findBindColumnId = function(id)
{
	var rtn;
	for(var i=0; i < this.binds.length; i++ )
	{
		if( this.binds[i].compid == id )
		{
			rtn = this.binds[i].columnid;
			return rtn;
		}
	}
}

/**
* Function Name : gfn_makePhoneNumMask
* Description	: tel number set maskformat (전화번호 값 마스크 포맷 적용)
* Arguments		: objMsk - maskedit component
*         		  sValue - post edit value
* Return 		: none
*/
this.gfn_makePhoneNumMask = function(objMsk, sValue)
{
	var sReplaceValue;
	
	var sMask = "@@@-@@@@-@@@@";
	
	if(sValue.substr(0, 2)=="02")
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		
		if(sReplaceValue.length==9)
		{
			sMask = "@@-@@@-@@@@";
		}else
		{
			sMask = "@@-@@@@-@@@@";
		}
	}
	else
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		if(sReplaceValue.length==10)
		{
			sMask = "@@@-@@@-@@@@";
		}else
		{
			sMask = "@@@-@@@@-@@@@";
		}
	}
	
	objMsk.set_format(sMask);
}

/**
* Function Name : gfn_setCellTelMaskFormat
* Description	: tel number return maskformat (전화번호 값 마스크 포맷 리턴 : 그리드 expr용)
* Arguments		: sValue - post edit value
* Return 		: sMask - mask format
*/
this.gfn_setCellTelMaskFormat = function(sValue)
{
	if(this.gfn_isNull(sValue))
	{
		return "@@@-@@@@-@@@@";
	}	
	
	var sReplaceValue;
	
	var sMask = "";
	
	if(sValue.substr(0, 2)=="02")
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		
		if(sReplaceValue.length==9)
		{
			sMask = "@@-@@@-@@@@";
		}else
		{
			sMask = "@@-@@@@-@@@@";
		}
	}
	else
	{
		sReplaceValue = nexacro.replaceAll(sValue, " ", "");
		if(sReplaceValue.length==10)
		{
			sMask = "@@@-@@@-@@@@";
		}else
		{
			sMask = "@@@-@@@@-@@@@";
		}
	}
	
	return sMask;
};



this.gfn_headCheckBox = function(obj, curCellIndex, strColName){
	var headerCell = obj.getBindCellIndex("body", strColName);
	var checkValue = "Y";
	
	if(obj.getCellProperty("Head", curCellIndex, "displaytype") == "checkboxcontrol"){
	
		if(obj.getCellProperty("Head", headerCell, "displaytype") == "checkboxcontrol") {
			if (obj.getCellProperty("Head", headerCell, "text") == "Y") { //현재 체크박스 값과 반대되게
				checkValue = "N";
			} else {
				checkValue = "Y";
			}
			
			obj.setCellProperty("Head", headerCell, "text", checkValue); //헤더 체크박스 값 변경
			
			var objDataset = obj.getBindDataset(); //그리드에 바인드되어있는 dataset 가져옴
			if(objDataset.getRowCount() > 0) {
				objDataset.set_enableevent(false); //이벤트 비활성화
				for (var i=0; i < objDataset.getRowCount(); i++) {			
					
					if(objDataset.getRowType(i) != 2){
						objDataset.setColumn(i, strColName, checkValue); //체크박스를 checkValue로 설정
					}
					
				}
				objDataset.set_enableevent(true); //이벤트 활성화
			}
		}
	}
}

this.gfn_enable_check = function(objDs, strColName){		
	objDs.set_enableevent(false);	
	for(var i = 0 ; i < objDs.getRowCount() ; i++){			
		objDs.setColumn(i, strColName,"N");
	}
	objDs.set_enableevent(true);
}

this.gfn_check_length = function(objDs, strColName){				
	var chkVal = "N";
	var cnt = 0;
	for(var i = 0 ; i < objDs.getRowCount() ; i++){			
		chkVal = objDs.getColumn(i, "chk");
		if(chkVal == "Y"){
			cnt++ ;
		}
	}	
	
	return cnt;
}


/**
* Function Name : gfn_component_repostion
* Description	: 히튼 컴포넌트를 숨기처리후 포지션 변경이 필요한 컴포넌트 포지션 변경
* Arguments		: hideCompName - hidden component, arrRepositionCompName - reposition components, isVisible - visible state
* Return 		: 
*/
this.gfn_component_repostion = function(arrHideCompName, arrRepositionCompName, isVisible, interval){

	var components = this.components;
	var top_val = 0;
	var tmpIndex = 0;
	
	for(var i = 0 ; i < arrRepositionCompName.length ; i++){
		if(!isVisible){			
			components[arrRepositionCompName[i]].ori_top = components[arrRepositionCompName[i]].top;
		}
	}

	for(var i = 0 ; i < arrHideCompName.length ; i++){
		components[arrHideCompName[i]].set_visible(isVisible);
	}
	
	for(var i = 0 ; i < arrRepositionCompName.length ; i++){
		if(!isVisible){			
			if(i == 0){
				components[arrRepositionCompName[i]].set_top( components[arrHideCompName[i]].top );
			}else{				
				top_val = parseInt(components[arrRepositionCompName[0 + tmpIndex]].top) + parseInt(components[arrRepositionCompName[0 + tmpIndex]].height) + interval;				
				components[arrRepositionCompName[i]].set_top( top_val );				
				tmpIndex += 1;
			}
		}else{
			components[arrRepositionCompName[i]].set_top( components[arrRepositionCompName[i]].ori_top );
			tmpIndex = 0;
		}
	}	
}



/**
* Function Name : gfn_cutFileSize
* Description	: 파일 사이즈 표시
* Arguments		: filesize bytes
* Return 		: 
*/
this.gfn_cutFileSize = function(filesize)
{
    var sOutput = filesize + " bytes";
    for (var aMultiples = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], nMultiple = 0, nApprox = filesize / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) 
    {
        sOutput = nApprox.toFixed(3) + " " + aMultiples[nMultiple];
    }
    return sOutput;
};


/**
* Function Name : gfn_fileDown
* Description	: 파일 다운로드
* Arguments		: objDs : 첨부파일 dataset, fileDownTransfer : FileDownTransfer Object
* Return 		: 
*/
this.gfn_fileDown = function(objDs, fileDownTransfer){
	
	var application = nexacro.getApplication();
	var objGdsFileDown = application.gdsFileDown;
	
	var saveFileNm = "";
	var realFileNm = "";
	var phyPath = "";
		
	objGdsFileDown.clearData();	

	for(var i = 0 ; i < objDs.getRowCount() ; i++){
		var nChk = objDs.getColumn(i, "chk");
		
		if(nChk == "Y"){
			var nRow = objGdsFileDown.addRow();		
			
			saveFileNm = objDs.getColumn(i, "saveFileNm");
			realFileNm = objDs.getColumn(i, "realFileNm");
			phyPath = objDs.getColumn(i, "phyPath");
			
			objGdsFileDown.setColumn(nRow, "saveFileNm", saveFileNm);
			objGdsFileDown.setColumn(nRow, "realFileNm", realFileNm);
			objGdsFileDown.setColumn(nRow, "phyPath", phyPath);
			
			objDs.setColumn(i, "chk", "N");
		}
	}
	
	if(objGdsFileDown.getRowCount() > 0){
		fileDownTransfer.setPostData("fileInfo", objGdsFileDown.saveXML());		
		
		if(objGdsFileDown.getRowCount() > 1){
			fileDownTransfer.set_downloadfilename("첨부파일.zip");
		}else{
			fileDownTransfer.set_downloadfilename(realFileNm);
		}
		
		fileDownTransfer.download();
				
	}else{
		this.alert("다운로드 할 파일을 선택하세요.");
	}
}

this.gfn_btn_auth = function(objDs, authType){
	
	var authYn = objDs.getColumn(0, authType);
	
	if(authYn == "N") { 
		this.alert("권한이 부족합니다.");
		return true;
	}else{
		return false;
	}
}



/**************************************************************************
* 사용자 FUNCTION 영역
**************************************************************************/
/**
* @description 	   		: 그리드의 체크박스를 Dataset 없이 사용하는 함수
* @param objDs	   		: 설정할 데이터셋
* @param objGrd		   	: 설정할 그리드
* @param nCheckCellIdx	: 체크박스로 사용할 그리드 Cell Index
* @return          		: 없음
*/
this.gfnSetCheckBoxNoDataset = function(objDs, objGrd, nCheckCellIdx) 
{ 
	//체크여부 정보를 담을 Array를 사용자 변수로 설정
	objDs.checkarray = new Array(); 

	//데이터셋 온로드이벤트 추가
	objDs.addEventHandler("onload", this.gfnDataset_onload); 

	//체크박스를 설정할 그리드의 Cell Index를 사용자 변수로 설정
	objGrd.checkcell = nCheckCellIdx; 
	
	//그리드 Cell Click 이벤트 추가
	objGrd.addEventHandler("oncellclick", this.gfnGrid_oncellclick); 
	
	//그리드 Head Click 이벤트 추가
	objGrd.addEventHandler("onheadclick", this.gfnGrid_onheadclick); 
} 

/**************************************************************************
* 각 COMPONENT 별 EVENT 영역
**************************************************************************/
/**
* @description 	   : 데이터셋 onload 이벤트
*/
this.gfnDataset_onload = function(obj:nexacro.NormalDataset,e:nexacro.DSLoadEventInfo) 
{ 
	console.log("111");
	console.log(e.reason);
	if(e.reason==0) 
	{ 
		//데이터셋이 로드되면 checkarray 초기화
		obj.checkarray = new Array(); 
	} 
}; 

/**
* @description 	   : 그리드 oncellclick 이벤트
*/
this.gfnGrid_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo) 
{ 
	var objDs; 
	//클릭된 cell이 checkcell이면
	if(e.cell==obj.checkcell) 
	{ 
		objDs = obj.getBindDataset(); 
		
		if(objDs.checkarray[e.row]==1) 
		{ 
			//체크 해제
			objDs.checkarray[e.row] = 0; 
		}else 
		{ 
			//체크 설정
			objDs.checkarray[e.row] = 1; 
		}
		
		//Expr이 바로 반영되도록 실행
		obj.redrawExprCell(); 
	} 
}; 

/**
* @description 	   : 그리드 onheadclick 이벤트
*/
this.gfnGrid_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo) 
{ 
	var i; 
	var objDs; 
	var nChkVal; 
	
	//클릭된 cell이 checkcell이면
	if(e.cell==obj.checkcell) 
	{ 
		objDs = obj.getBindDataset(); 
		nChkVal = obj.getCellText(-1, e.cell); 

		if(nChkVal==1)nChkVal = 0; 
		else nChkVal = 1; 
		
		//Head의 체크 상태 변경
		obj.setCellProperty("head", e.cell, "text", nChkVal); 

		//Body의 체크 상태 변경
		for(i=0;i<objDs.rowcount;i++) 
		{ 
			objDs.checkarray[i] = nChkVal; 
		} 
		
		//Expr이 바로 반영되도록 실행
		obj.redrawExprCell(); 
	} 
}; 

]]></Script>
