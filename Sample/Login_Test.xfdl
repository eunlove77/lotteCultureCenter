<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Login_Test" width="1280" height="720" titletext="New Form">
    <Layouts>
      <Layout height="720" mobileorientation="landscape" width="1280">
        <Button id="LoginBtn" taborder="0" text="로그인" left="101" top="102" width="120" height="50" onclick="Button00_onclick"/>
        <Button id="Button01" taborder="1" text="로그아웃" left="103" top="180" width="120" height="50" onclick="Button01_onclick"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[
this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var strSvcId    = "login";
	var strSvcUrl   = "Login_svc::setLogin.do";
	var inData      = "";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	var isAsync     = true;

  this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            callBackFnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]
};


//처리콜백 함수
this.fnCallback = function(svcID,errorCode,errorMsg)
{
  // 에러 시 화면 처리 내역
  if(errorCode != 0)
  {
    this.alert(errorCode+"\n"+errorMsg);
    return;
  }

  switch(svcID)
  {
    case "login":
      
	  this.alert("login callback");
	  
      break;
	 
	case "logout":
		this.alert("logout callback");
	break;
  }
};

this.Button01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var strSvcId    = "logout";
	var strSvcUrl   = "Login_svc::setLogout.do";
	var inData      = "";
	var outData     = "";
	var strArg      = "";
	var callBackFnc = "fnCallback";
	var isAsync     = true;

  this.transaction(strSvcId ,   // transaction을 구분하기 위한 svc id값
            strSvcUrl ,       // trabsaction을 요청할 주소
            inData ,         // 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
            outData ,         // 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
            strArg,         // 입력값으로 보낼 arguments, a=b
            callBackFnc,       // transaction의 결과를 받을 Function 이름
            isAsync);         // 비동기통신 여부 [생략가능]
};
]]></Script>
  </Form>
</FDL>
